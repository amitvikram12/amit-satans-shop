{"ast":null,"code":"import queryString from'query-string';import{useEffect}from'react';import{useLocation}from'react-router-dom';import Cake from'./Cake';import{CircleLoader}from'react-spinners';import{connect}from'react-redux';import{fetchSearchCakes as _fetchSearchCakes}from'../reduxstore';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Search=function Search(_ref){var cakes=_ref.cakes,error=_ref.error,loading=_ref.loading,fetchSearchCakes=_ref.fetchSearchCakes;var location=useLocation();var loaderStyle={position:\"absolute\",left:\"50%\",top:\"50%\",zIndex:\"999\"};var query=queryString.parse(location.search);useEffect(function(){fetchSearchCakes(query.q);},[query.q]);return/*#__PURE__*/_jsx(\"div\",{style:{marginTop:\"20px\",marginLeft:\"20px\"},children:loading?/*#__PURE__*/_jsx(\"div\",{class:loaderStyle,children:/*#__PURE__*/_jsx(CircleLoader,{})}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"33% 33% 33%\",gridGap:\"50px\"},children:cakes.map(function(each,index){return/*#__PURE__*/_jsx(Cake,{cake:each},index);})}),cakes.length==0&&/*#__PURE__*/_jsx(\"div\",{className:\"alert\",children:/*#__PURE__*/_jsxs(\"h1\",{children:[\"Sorry no results found for search \",query.q]})})]})});};var mapStateToProps=function mapStateToProps(state){return{loading:state.cake.loading,cakes:state.cake.cakes,error:state.cake.error};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{fetchSearchCakes:function fetchSearchCakes(searchTerm){return dispatch(_fetchSearchCakes(searchTerm));}};};export default connect(mapStateToProps,mapDispatchToProps)(Search);","map":{"version":3,"sources":["/home/neosoft/react-project/react-second-saga/src/components/Search.js"],"names":["queryString","useEffect","useLocation","Cake","CircleLoader","connect","fetchSearchCakes","Search","cakes","error","loading","location","loaderStyle","position","left","top","zIndex","query","parse","search","q","marginTop","marginLeft","display","gridTemplateColumns","gridGap","map","each","index","length","mapStateToProps","state","cake","mapDispatchToProps","dispatch","searchTerm"],"mappings":"AAAA,MAAOA,CAAAA,WAAP,KAAwB,cAAxB,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,gBAAgB,GAAhBA,CAAAA,iBAAT,KAAiC,eAAjC,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAA6C,IAA3CC,CAAAA,KAA2C,MAA3CA,KAA2C,CAArCC,KAAqC,MAArCA,KAAqC,CAA/BC,OAA+B,MAA/BA,OAA+B,CAAtBJ,gBAAsB,MAAtBA,gBAAsB,CACxD,GAAMK,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CACA,GAAMU,CAAAA,WAAW,CAAG,CAChBC,QAAQ,CAAC,UADO,CAEhBC,IAAI,CAAC,KAFW,CAGhBC,GAAG,CAAC,KAHY,CAIhBC,MAAM,CAAC,KAJS,CAApB,CAMA,GAAIC,CAAAA,KAAK,CAAGjB,WAAW,CAACkB,KAAZ,CAAkBP,QAAQ,CAACQ,MAA3B,CAAZ,CACAlB,SAAS,CAAC,UAAM,CACZK,gBAAgB,CAACW,KAAK,CAACG,CAAP,CAAhB,CACH,CAFQ,CAEP,CAACH,KAAK,CAACG,CAAP,CAFO,CAAT,CAGA,mBACI,YAAK,KAAK,CAAE,CAACC,SAAS,CAAC,MAAX,CAAmBC,UAAU,CAAC,MAA9B,CAAZ,UACAZ,OAAO,cAAG,YAAK,KAAK,CAAEE,WAAZ,uBAAyB,KAAC,YAAD,IAAzB,EAAH,cAAoD,oCACvD,YAAK,KAAK,CAAE,CAACW,OAAO,CAAC,MAAT,CAAiBC,mBAAmB,CAAC,aAArC,CAAmDC,OAAO,CAAC,MAA3D,CAAZ,UACKjB,KAAK,CAACkB,GAAN,CAAU,SAACC,IAAD,CAAOC,KAAP,CAAiB,CACxB,mBAAO,KAAC,IAAD,EAAkB,IAAI,CAAED,IAAxB,EAAWC,KAAX,CAAP,CACH,CAFA,CADL,EADuD,CAMtDpB,KAAK,CAACqB,MAAN,EAAgB,CAAhB,eAAqB,YAAK,SAAS,CAAC,OAAf,uBAClB,2DAAuCZ,KAAK,CAACG,CAA7C,GADkB,EANiC,GAD3D,EADJ,CAeH,CA3BD,CA4BA,GAAMU,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CAC/B,MAAO,CACHrB,OAAO,CAACqB,KAAK,CAACC,IAAN,CAAWtB,OADhB,CAEHF,KAAK,CAACuB,KAAK,CAACC,IAAN,CAAWxB,KAFd,CAGHC,KAAK,CAACsB,KAAK,CAACC,IAAN,CAAWvB,KAHd,CAAP,CAKH,CAND,CAQA,GAAMwB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACnC,MAAO,CACH5B,gBAAgB,CAAC,0BAAC6B,UAAD,QAAgBD,CAAAA,QAAQ,CAAC5B,iBAAgB,CAAC6B,UAAD,CAAjB,CAAxB,EADd,CAAP,CAGH,CAJD,CAKA,cAAe9B,CAAAA,OAAO,CAACyB,eAAD,CAAiBG,kBAAjB,CAAP,CAA4C1B,MAA5C,CAAf","sourcesContent":["import queryString from 'query-string';\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Cake from './Cake';\nimport { CircleLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { fetchSearchCakes } from '../reduxstore';\n\nconst Search = ({cakes,error,loading, fetchSearchCakes}) => {\n    const location = useLocation();\n    const loaderStyle = {\n        position:\"absolute\",\n        left:\"50%\",\n        top:\"50%\",\n        zIndex:\"999\",\n    }\n    let query = queryString.parse(location.search)\n    useEffect(() => {\n        fetchSearchCakes(query.q);\n    },[query.q]);\n    return (\n        <div style={{marginTop:\"20px\", marginLeft:\"20px\"}}> \n       {loading ? <div class={loaderStyle}><CircleLoader/></div> : <div>\n            <div style={{display:\"grid\", gridTemplateColumns:\"33% 33% 33%\",gridGap:\"50px\"}}>\n                {cakes.map((each, index) => {\n                    return <Cake key={index} cake={each}/>\n                })}\n            </div>\n            {cakes.length == 0 && <div className=\"alert\">\n                <h1>Sorry no results found for search {query.q}</h1>\n            </div>}\n       </div>}\n       </div>\n\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        loading:state.cake.loading,\n        cakes:state.cake.cakes,\n        error:state.cake.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchSearchCakes:(searchTerm) => dispatch(fetchSearchCakes(searchTerm))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);"]},"metadata":{},"sourceType":"module"}