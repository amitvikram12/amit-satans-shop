{"ast":null,"code":"import axios from \"axios\";\nimport { CAKE_FETCH_SEARCH_REQUEST, CAKE_FETCH_SEARCH_SUCCESS, CAKE_FETCH_SEARCH_ERROR, CAKE_FETCH_ALL_SUCCESS, CAKE_FETCH_ALL_REQUEST, CAKE_FETCH_ALL_ERROR } from \"./cakeTypes\";\nexport const fetchAllCakesRequest = () => {\n  return {\n    type: CAKE_FETCH_ALL_REQUEST\n  };\n};\nexport const fetchAllCakesSuccess = payload => {\n  return {\n    type: CAKE_FETCH_ALL_SUCCESS,\n    payload: payload\n  };\n};\nexport const fetchAllCakesError = payload => {\n  return {\n    type: CAKE_FETCH_ALL_ERROR,\n    payload: payload\n  };\n};\nexport const fetchSearchCakesRequest = () => {\n  return {\n    type: CAKE_FETCH_SEARCH_REQUEST\n  };\n};\nexport const fetchSearchCakesSuccess = payload => {\n  return {\n    type: CAKE_FETCH_SEARCH_SUCCESS,\n    payload: payload\n  };\n};\nexport const fetchSearchCakesError = payload => {\n  return {\n    type: CAKE_FETCH_SEARCH_ERROR,\n    payload: payload\n  };\n};\nexport const fetchAllCakes = () => {\n  return dispatch => {\n    dispatch(fetchAllCakesRequest());\n    axios({\n      url: `${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/allcakes`,\n      method: \"GET\"\n    }).then(response => dispatch(fetchAllCakesSuccess(response.data.data))).catch(error => dispatch(fetchAllCakesError(error.message)));\n  };\n};\nexport const fetchSearchCakes = searchText => {\n  return dispatch => {\n    dispatch(fetchSearchCakesRequest());\n    axios({\n      method: \"GET\",\n      url: `${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/searchcakes?q=${searchText}`\n    }).then(response => dispatch(fetchSearchCakesSuccess(response.data.data))).catch(error => dispatch(fetchAllCakesError(error.message)));\n  };\n};","map":{"version":3,"sources":["/home/neosoft/react-project/react-first/src/reduxstore/cakes/cakeActions.js"],"names":["axios","CAKE_FETCH_SEARCH_REQUEST","CAKE_FETCH_SEARCH_SUCCESS","CAKE_FETCH_SEARCH_ERROR","CAKE_FETCH_ALL_SUCCESS","CAKE_FETCH_ALL_REQUEST","CAKE_FETCH_ALL_ERROR","fetchAllCakesRequest","type","fetchAllCakesSuccess","payload","fetchAllCakesError","fetchSearchCakesRequest","fetchSearchCakesSuccess","fetchSearchCakesError","fetchAllCakes","dispatch","url","process","env","REACT_APP_CAKE_WEBSITE_API_URL","method","then","response","data","catch","error","message","fetchSearchCakes","searchText"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,yBADJ,EAEIC,yBAFJ,EAGIC,uBAHJ,EAIIC,sBAJJ,EAKIC,sBALJ,EAMIC,oBANJ,QAOO,aAPP;AASA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACtC,SAAO;AACHC,IAAAA,IAAI,EAACH;AADF,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMI,oBAAoB,GAAGC,OAAO,IAAK;AAC5C,SAAO;AACHF,IAAAA,IAAI,EAACJ,sBADF;AAEHM,IAAAA,OAAO,EAACA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,kBAAkB,GAAGD,OAAO,IAAI;AACzC,SAAO;AACHF,IAAAA,IAAI,EAACF,oBADF;AAEHI,IAAAA,OAAO,EAACA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,uBAAuB,GAAG,MAAM;AACzC,SAAO;AACHJ,IAAAA,IAAI,EAACP;AADF,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMY,uBAAuB,GAAGH,OAAO,IAAI;AAC9C,SAAO;AACHF,IAAAA,IAAI,EAAEN,yBADH;AAEHQ,IAAAA,OAAO,EAACA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAMI,qBAAqB,GAAGJ,OAAO,IAAI;AAC5C,SAAO;AACHF,IAAAA,IAAI,EAAEL,uBADH;AAEHO,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMK,aAAa,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACT,oBAAoB,EAArB,CAAR;AACAP,IAAAA,KAAK,CAAC;AACFiB,MAAAA,GAAG,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,8BAA+B,WADjD;AAEFC,MAAAA,MAAM,EAAC;AAFL,KAAD,CAAL,CAGGC,IAHH,CAGQC,QAAQ,IAAIP,QAAQ,CAACP,oBAAoB,CAACc,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAArB,CAH5B,EAIEC,KAJF,CAIQC,KAAK,IAAIV,QAAQ,CAACL,kBAAkB,CAACe,KAAK,CAACC,OAAP,CAAnB,CAJzB;AAKH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMC,gBAAgB,GAAIC,UAAD,IAAgB;AAC5C,SAAQb,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACJ,uBAAuB,EAAxB,CAAR;AACAZ,IAAAA,KAAK,CAAC;AACFqB,MAAAA,MAAM,EAAC,KADL;AAEFJ,MAAAA,GAAG,EAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,8BAA+B,kBAAiBS,UAAW;AAF5E,KAAD,CAAL,CAICP,IAJD,CAIMC,QAAQ,IAAIP,QAAQ,CAACH,uBAAuB,CAACU,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAxB,CAJ1B,EAKCC,KALD,CAKOC,KAAK,IAAIV,QAAQ,CAACL,kBAAkB,CAACe,KAAK,CAACC,OAAP,CAAnB,CALxB;AAMH,GARD;AASH,CAVM","sourcesContent":["import axios from \"axios\"\nimport { \n    CAKE_FETCH_SEARCH_REQUEST, \n    CAKE_FETCH_SEARCH_SUCCESS, \n    CAKE_FETCH_SEARCH_ERROR, \n    CAKE_FETCH_ALL_SUCCESS, \n    CAKE_FETCH_ALL_REQUEST, \n    CAKE_FETCH_ALL_ERROR \n} from \"./cakeTypes\"\n\nexport const fetchAllCakesRequest = () => {\n    return {\n        type:CAKE_FETCH_ALL_REQUEST\n    }\n} \n\nexport const fetchAllCakesSuccess = payload =>  {\n    return {\n        type:CAKE_FETCH_ALL_SUCCESS,\n        payload:payload\n    }\n}\n\nexport const fetchAllCakesError = payload => {\n    return {\n        type:CAKE_FETCH_ALL_ERROR,\n        payload:payload\n    }\n}\n\nexport const fetchSearchCakesRequest = () => {\n    return {\n        type:CAKE_FETCH_SEARCH_REQUEST\n    }\n}\n\nexport const fetchSearchCakesSuccess = payload => {\n    return {\n        type: CAKE_FETCH_SEARCH_SUCCESS,\n        payload:payload\n    }\n}\n\nexport const fetchSearchCakesError = payload => {\n    return {\n        type: CAKE_FETCH_SEARCH_ERROR,\n        payload: payload\n    }\n}\n\nexport const fetchAllCakes = () => {\n    return (dispatch) => {\n        dispatch(fetchAllCakesRequest());\n        axios({\n            url: `${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/allcakes`,\n            method:\"GET\"\n        }).then(response => dispatch(fetchAllCakesSuccess(response.data.data))\n        ).catch(error => dispatch(fetchAllCakesError(error.message)))\n    }\n}\n\nexport const fetchSearchCakes = (searchText) => {\n    return (dispatch) => {\n        dispatch(fetchSearchCakesRequest());\n        axios({\n            method:\"GET\",\n            url:`${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/searchcakes?q=${searchText}`\n        })\n        .then(response => dispatch(fetchSearchCakesSuccess(response.data.data)))\n        .catch(error => dispatch(fetchAllCakesError(error.message)))\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}