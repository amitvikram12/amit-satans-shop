{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/react-project/react-first/src/components/CakeLIst.js\",\n    _s = $RefreshSig$();\n\nimport Cake from \"./Cake\";\nimport { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport { CircleLoader } from \"react-spinners\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCakes } from \"../reduxstore/cakes/cakeActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CakeList = props => {\n  _s();\n\n  const loaderStyle = {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    zIndex: \"999\"\n  };\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: url || `${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/allcakes`\n    }).then(response => {\n      console.log(response);\n      setCakes(response.data.data);\n      setLoading(false);\n    }, error => {\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: loaderStyle,\n      children: /*#__PURE__*/_jsxDEV(CircleLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 49\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"33% 33% 33%\",\n        gridGap: \"50px\"\n      },\n      children: cakes.map((cake, index) => {\n        return /*#__PURE__*/_jsxDEV(Cake, {\n          cake: cake\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 30\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 73\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CakeList, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CakeList;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.cake.loading,\n    cakes: state.cake.cakes,\n    error: state.cake.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAllCakes: () => dispatch(fetchAllCakes())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CakeList);\n\nvar _c;\n\n$RefreshReg$(_c, \"CakeList\");","map":{"version":3,"sources":["/home/neosoft/react-project/react-first/src/components/CakeLIst.js"],"names":["Cake","useEffect","useState","axios","CircleLoader","connect","fetchAllCakes","CakeList","props","loaderStyle","position","left","top","zIndex","method","url","process","env","REACT_APP_CAKE_WEBSITE_API_URL","then","response","console","log","setCakes","data","setLoading","error","loading","display","gridTemplateColumns","gridGap","cakes","map","cake","index","mapStateToProps","state","mapDispatchToProps","dispatch","getAllCakes"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,iCAA9B;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAExB,QAAMC,WAAW,GAAG;AAChBC,IAAAA,QAAQ,EAAC,UADO;AAEhBC,IAAAA,IAAI,EAAC,KAFW;AAGhBC,IAAAA,GAAG,EAAC,KAHY;AAIhBC,IAAAA,MAAM,EAAC;AAJS,GAApB;AAMAZ,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,KAAK,CAAC;AACFW,MAAAA,MAAM,EAAC,KADL;AAEFC,MAAAA,GAAG,EAAEA,GAAG,IAAK,GAAEC,OAAO,CAACC,GAAR,CAAYC,8BAA+B;AAFxD,KAAD,CAAL,CAGGC,IAHH,CAIKC,QAAD,IAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,MAAAA,QAAQ,CAACH,QAAQ,CAACI,IAAT,CAAcA,IAAf,CAAR;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KARL,EASKC,KAAD,IAAW;AACPL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH,KAXL;AAaH,GAdQ,EAcP,EAdO,CAAT;AAgBA,sBACI;AAAA,cACKC,OAAO,gBAAG;AAAK,MAAA,KAAK,EAAElB,WAAZ;AAAA,6BAAyB,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoD;AAAK,MAAA,KAAK,EAAE;AAACmB,QAAAA,OAAO,EAAC,MAAT;AAAiBC,QAAAA,mBAAmB,EAAC,aAArC;AAAmDC,QAAAA,OAAO,EAAC;AAA3D,OAAZ;AAAA,gBACnDC,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB,4BACK,QAAC,IAAD;AAAM,UAAA,IAAI,EAAED;AAAZ,WAAuBC,KAAvB;AAAA;AAAA;AAAA;AAAA,gBADL;AAGH,OAJA;AADmD;AAAA;AAAA;AAAA;AAAA;AADhE;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CArCD;;GAAM3B,Q;;KAAAA,Q;;AAuCN,MAAM4B,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHT,IAAAA,OAAO,EAACS,KAAK,CAACH,IAAN,CAAWN,OADhB;AAEHI,IAAAA,KAAK,EAACK,KAAK,CAACH,IAAN,CAAWF,KAFd;AAGHL,IAAAA,KAAK,EAACU,KAAK,CAACH,IAAN,CAAWP;AAHd,GAAP;AAKH,CAND;;AAQA,MAAMW,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHC,IAAAA,WAAW,EAAC,MAAMD,QAAQ,CAAChC,aAAa,EAAd;AADvB,GAAP;AAGH,CAJD;;AAKA,eAAeD,OAAO,CAAC8B,eAAD,EAAiBE,kBAAjB,CAAP,CAA4C9B,QAA5C,CAAf","sourcesContent":["import Cake from \"./Cake\";\nimport {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport { CircleLoader } from \"react-spinners\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCakes } from \"../reduxstore/cakes/cakeActions\";\n\nconst CakeList = (props) => {\n\n    const loaderStyle = {\n        position:\"absolute\",\n        left:\"50%\",\n        top:\"50%\",\n        zIndex:\"999\",\n    }\n    useEffect(() => {\n        axios({\n            method:\"GET\",\n            url: url || `${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/allcakes`,\n        }).then(\n            (response) => {\n                console.log(response);\n                setCakes(response.data.data);\n                setLoading(false);\n            },\n            (error) => {\n                console.log(error);\n            }\n        );\n    },[])\n\n    return (\n        <div>\n            {loading ? <div style={loaderStyle}><CircleLoader/></div> : <div style={{display:\"grid\", gridTemplateColumns:\"33% 33% 33%\",gridGap:\"50px\"}}>\n                    {cakes.map((cake, index) => {\n                        return (\n                             <Cake cake={cake} key={index}/>\n                        )\n                    })}\n                </div>}\n        </div>\n        \n        \n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading:state.cake.loading,\n        cakes:state.cake.cakes,\n        error:state.cake.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getAllCakes:() => dispatch(fetchAllCakes())\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(CakeList);"]},"metadata":{},"sourceType":"module"}