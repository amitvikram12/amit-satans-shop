{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/react-project/react-first/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport Cake from './Cake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = props => {\n  _s();\n\n  let query = queryString.parse(location.search);\n  const [cakes, setCakes] = useState([]);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: `${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/searchcakes?q=${query.q}`\n    }).then(response => {\n      setCakes(response.data.data);\n    }, error => {\n      setError(error);\n    });\n  }, [query.q]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\"\n      },\n      children: cakes.map((each, index) => {\n        /*#__PURE__*/\n        _jsxDEV(Cake, {\n          cake: each\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), cakes.length == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Sorry no results found for search \", query.q]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 8\n  }, this);\n};\n\n_s(Search, \"FeDWN1h+qYftVrjpEEpuvZ9r8Sc=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/neosoft/react-project/react-first/src/components/Search.js"],"names":["axios","queryString","useEffect","useState","Cake","Search","props","query","parse","location","search","cakes","setCakes","error","setError","method","url","process","env","REACT_APP_CAKE_WEBSITE_API_URL","q","then","response","data","display","map","each","index","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACtB,MAAIC,KAAK,GAAGN,WAAW,CAACO,KAAZ,CAAkBC,QAAQ,CAACC,MAA3B,CAAZ;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZF,IAAAA,KAAK,CAAC;AACFe,MAAAA,MAAM,EAAC,KADL;AAEFC,MAAAA,GAAG,EAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,8BAA+B,kBAAiBZ,KAAK,CAACa,CAAE;AAFzE,KAAD,CAAL,CAGGC,IAHH,CAGSC,QAAD,IAAc;AAClBV,MAAAA,QAAQ,CAACU,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAR;AACH,KALD,EAKIV,KAAD,IAAW;AACVC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAPD;AAQH,GATQ,EASP,CAACN,KAAK,CAACa,CAAP,CATO,CAAT;AAUA,sBACG;AAAA,4BACK;AAAK,MAAA,KAAK,EAAE;AAACI,QAAAA,OAAO,EAAC;AAAT,OAAZ;AAAA,gBACKb,KAAK,CAACc,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB;AAAA,gBAAC,IAAD;AAAkB,UAAA,IAAI,EAAED;AAAxB,WAAWC,KAAX;AAAA;AAAA;AAAA;AAAA;AACH,OAFA;AADL;AAAA;AAAA;AAAA;AAAA,YADL,EAMMhB,KAAK,CAACiB,MAAN,IAAgB,CAAhB,iBAAqB;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BAClB;AAAA,yDAAuCrB,KAAK,CAACa,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AADkB;AAAA;AAAA;AAAA;AAAA,YAN3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAaH,CA3BD;;GAAMf,M;;KAAAA,M;AA6BN,eAAeA,MAAf","sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport Cake from './Cake';\n\nconst Search = (props) => {\n    let query = queryString.parse(location.search)\n    const [cakes, setCakes] = useState([]);\n    const [error, setError] = useState(\"\");\n    useEffect(() => {\n        axios({\n            method:\"GET\",\n            url:`${process.env.REACT_APP_CAKE_WEBSITE_API_URL}/searchcakes?q=${query.q}`\n        }).then((response) => {\n            setCakes(response.data.data);\n        }, (error) => { \n            setError(error);\n        })\n    },[query.q]);\n    return (\n       <div>\n            <div style={{display:\"grid\"}}>\n                {cakes.map((each, index) => {\n                    <Cake key={index} cake={each}/>\n                })}\n            </div>\n            {cakes.length == 0 && <div className=\"alert\">\n                <h1>Sorry no results found for search {query.q}</h1>\n            </div>}\n       </div>\n\n    )\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}