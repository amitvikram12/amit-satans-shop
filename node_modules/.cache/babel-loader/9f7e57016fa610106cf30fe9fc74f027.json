{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/react-project/react-second-saga/src/components/Orders.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getOrderList } from \"../reduxstore\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Orders = ({\n  loading,\n  getOrderList,\n  orders\n}) => {\n  _s();\n\n  useEffect(() => {\n    getOrderList();\n  }, []);\n\n  const getReadableDate = date => {\n    return moment(date).format(\"Do MMM YYYY\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: orders.map((order, key) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Date: \", `${getReadableDate(order.orderdate)}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Reception status: \", order.pending ? 'Pending' : 'Order Recieved']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 25\n          }, this), !order.pending && /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Completion Status: \", order.completed ? \"Order fullfilled\" : \"Order to be fullfilled\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 44\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Mode of Payment: \", order.mode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-bordered\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 27,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Quantity\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 28,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 29,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: order.cakes.map((item, key) => {\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: \"item.name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 36,\n                      columnNumber: 45\n                    }, this)\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 35,\n                    columnNumber: 41\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Orders, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Orders;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.orders.loading,\n    orders: state.orders.orders\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getOrderList: () => dispatch(getOrderList())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/home/neosoft/react-project/react-second-saga/src/components/Orders.js"],"names":["useEffect","connect","getOrderList","moment","Orders","loading","orders","getReadableDate","date","format","map","order","key","orderdate","pending","completed","mode","cakes","item","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;AACA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUH,EAAAA,YAAV;AAAwBI,EAAAA;AAAxB,CAAD,KAAqC;AAAA;;AAChDN,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,YAAY;AACf,GAFQ,EAEP,EAFO,CAAT;;AAIA,QAAMK,eAAe,GAAGC,IAAI,IAAI;AAC5B,WAAOL,MAAM,CAACK,IAAD,CAAN,CAAaC,MAAb,CAAoB,aAApB,CAAP;AACH,GAFD;;AAIA,sBACI;AAAA,cACKH,MAAM,CAACI,GAAP,CAAW,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACxB,0BAAO;AAAA,+BACH;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACI;AAAA,iCAAY,GAAEL,eAAe,CAACI,KAAK,CAACE,SAAP,CAAkB,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,6CAAuBF,KAAK,CAACG,OAAN,GAAgB,SAAhB,GAA4B,gBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGK,CAACH,KAAK,CAACG,OAAP,iBAAkB;AAAA,8CAAwBH,KAAK,CAACI,SAAN,GAAkB,kBAAlB,GAAuC,wBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHvB,eAII;AAAA,4CAAsBJ,KAAK,CAACK,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA,mCACI;AAAO,cAAA,SAAS,EAAC,sBAAjB;AAAA,sCACI;AAAA,uCACI;AAAA,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADJ,eAQI;AAAA,0BACCL,KAAK,CAACM,KAAN,CAAYP,GAAZ,CAAgB,CAACQ,IAAD,EAAON,GAAP,KAAe;AAC5B,sCACI;AAAA,2CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,qBAASA,GAAT;AAAA;AAAA;AAAA;AAAA,0BADJ;AAKH,iBANA;AADD;AAAA;AAAA;AAAA;AAAA,sBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,SAAUA,GAAV;AAAA;AAAA;AAAA;AAAA,cAAP;AA4BH,KA7BA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CA5CD;;GAAMR,M;;KAAAA,M;;AA8CN,MAAMe,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHf,IAAAA,OAAO,EAACe,KAAK,CAACd,MAAN,CAAaD,OADlB;AAEHC,IAAAA,MAAM,EAACc,KAAK,CAACd,MAAN,CAAaA;AAFjB,GAAP;AAIH,CALD;;AAOA,MAAMe,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHpB,IAAAA,YAAY,EAAE,MAAMoB,QAAQ,CAACpB,YAAY,EAAb;AADzB,GAAP;AAGH,CAJD;;AAKA,eAAeD,OAAO,CAACkB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjB,MAA7C,CAAf","sourcesContent":["import { useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { getOrderList } from \"../reduxstore\"\nimport moment from \"moment\"\nconst Orders = ({loading, getOrderList, orders}) => {\n    useEffect(() => {\n        getOrderList()\n    },[])\n\n    const getReadableDate = date => {\n        return moment(date).format(\"Do MMM YYYY\")\n    }\n\n    return (\n        <div>\n            {orders.map((order, key) => {\n                return(<div key={key}>\n                    <div className=\"row\">\n                        <h4>Date: {`${getReadableDate(order.orderdate)}`}</h4>\n                        <h4>Reception status: {order.pending ? 'Pending' : 'Order Recieved' }</h4>\n                        {!order.pending && <h4>Completion Status: {order.completed ? \"Order fullfilled\" : \"Order to be fullfilled\"} </h4>}\n                        <h4>Mode of Payment: {order.mode}</h4>\n                        <div className=\"row\">\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>Name</th>\n                                        <th>Quantity</th>\n                                        <th>Price</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                {order.cakes.map((item, key) => {\n                                    return (\n                                        <tr key={key}>\n                                            <td>item.name</td>\n                                        </tr>\n                                    )\n                                })}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>)\n            })\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading:state.orders.loading,\n        orders:state.orders.orders\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getOrderList: () => dispatch(getOrderList())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders)"]},"metadata":{},"sourceType":"module"}