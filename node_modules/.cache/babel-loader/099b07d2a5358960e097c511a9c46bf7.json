{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/react-project/react-first/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Cake from './Cake';\nimport { CircleLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { fetchSearchCakes } from '../reduxstore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  cakes,\n  error,\n  loading\n}) => {\n  _s();\n\n  console.log(props);\n  const location = useLocation();\n  const loaderStyle = {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    zIndex: \"999\"\n  };\n  let query = queryString.parse(location.search);\n  useEffect(() => {\n    fetchSearchCakes(query.q);\n  }, [query.q]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: loaderStyle,\n      children: /*#__PURE__*/_jsxDEV(CircleLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"grid\",\n          gridTemplateColumns: \"33% 33% 33%\",\n          gridGap: \"50px\"\n        },\n        children: cakes.map((each, index) => {\n          return /*#__PURE__*/_jsxDEV(Cake, {\n            cake: each\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), cakes.length == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sorry no results found for search \", query.q]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 70\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Search, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n\n_c = Search;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.cake.loading,\n    cakes: state.cake.cakes,\n    error: state.cake.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchSearchCakes: searchTerm => dispatch(fetchSearchCakes(searchTerm))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/neosoft/react-project/react-first/src/components/Search.js"],"names":["axios","queryString","useEffect","useState","useLocation","Cake","CircleLoader","connect","fetchSearchCakes","Search","cakes","error","loading","console","log","props","location","loaderStyle","position","left","top","zIndex","query","parse","search","q","isLoading","display","gridTemplateColumns","gridGap","map","each","index","length","mapStateToProps","state","cake","mapDispatchToProps","dispatch","searchTerm"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,eAAjC;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAOC,EAAAA,KAAP;AAAaC,EAAAA;AAAb,CAAD,KAA2B;AAAA;;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,WAAW,GAAG;AAChBC,IAAAA,QAAQ,EAAC,UADO;AAEhBC,IAAAA,IAAI,EAAC,KAFW;AAGhBC,IAAAA,GAAG,EAAC,KAHY;AAIhBC,IAAAA,MAAM,EAAC;AAJS,GAApB;AAMA,MAAIC,KAAK,GAAGrB,WAAW,CAACsB,KAAZ,CAAkBP,QAAQ,CAACQ,MAA3B,CAAZ;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,gBAAgB,CAACc,KAAK,CAACG,CAAP,CAAhB;AACH,GAFQ,EAEP,CAACH,KAAK,CAACG,CAAP,CAFO,CAAT;AAGA,sBACI;AAAA,cACAC,SAAS,gBAAG;AAAK,MAAA,KAAK,EAAET,WAAZ;AAAA,6BAAyB,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoD;AAAA,8BACzD;AAAK,QAAA,KAAK,EAAE;AAACU,UAAAA,OAAO,EAAC,MAAT;AAAiBC,UAAAA,mBAAmB,EAAC,aAArC;AAAmDC,UAAAA,OAAO,EAAC;AAA3D,SAAZ;AAAA,kBACKnB,KAAK,CAACoB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB,8BAAO,QAAC,IAAD;AAAkB,YAAA,IAAI,EAAED;AAAxB,aAAWC,KAAX;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFA;AADL;AAAA;AAAA;AAAA;AAAA,cADyD,EAMxDtB,KAAK,CAACuB,MAAN,IAAgB,CAAhB,iBAAqB;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BAClB;AAAA,2DAAuCX,KAAK,CAACG,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AADkB;AAAA;AAAA;AAAA;AAAA,cANmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAD7D;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA5BD;;GAAMhB,M;UAEeL,W;;;KAFfK,M;;AA6BN,MAAMyB,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHvB,IAAAA,OAAO,EAACuB,KAAK,CAACC,IAAN,CAAWxB,OADhB;AAEHF,IAAAA,KAAK,EAACyB,KAAK,CAACC,IAAN,CAAW1B,KAFd;AAGHC,IAAAA,KAAK,EAACwB,KAAK,CAACC,IAAN,CAAWzB;AAHd,GAAP;AAKH,CAND;;AAQA,MAAM0B,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACH9B,IAAAA,gBAAgB,EAAE+B,UAAD,IAAgBD,QAAQ,CAAC9B,gBAAgB,CAAC+B,UAAD,CAAjB;AADtC,GAAP;AAGH,CAJD;;AAKA,eAAehC,OAAO,CAAC2B,eAAD,EAAiBG,kBAAjB,CAAP,CAA4C5B,MAA5C,CAAf","sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Cake from './Cake';\nimport { CircleLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { fetchSearchCakes } from '../reduxstore';\n\nconst Search = ({cakes,error,loading}) => {\n    console.log(props)\n    const location = useLocation();\n    const loaderStyle = {\n        position:\"absolute\",\n        left:\"50%\",\n        top:\"50%\",\n        zIndex:\"999\",\n    }\n    let query = queryString.parse(location.search)\n    useEffect(() => {\n        fetchSearchCakes(query.q);\n    },[query.q]);\n    return (\n        <div>\n       {isLoading ? <div class={loaderStyle}><CircleLoader/></div> : <div>\n            <div style={{display:\"grid\", gridTemplateColumns:\"33% 33% 33%\",gridGap:\"50px\"}}>\n                {cakes.map((each, index) => {\n                    return <Cake key={index} cake={each}/>\n                })}\n            </div>\n            {cakes.length == 0 && <div className=\"alert\">\n                <h1>Sorry no results found for search {query.q}</h1>\n            </div>}\n       </div>}\n       </div>\n\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        loading:state.cake.loading,\n        cakes:state.cake.cakes,\n        error:state.cake.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchSearchCakes:(searchTerm) => dispatch(fetchSearchCakes(searchTerm))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);"]},"metadata":{},"sourceType":"module"}