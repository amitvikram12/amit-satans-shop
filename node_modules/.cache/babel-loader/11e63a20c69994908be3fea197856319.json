{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/react-project/react-first/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport queryString from 'query-string';\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Cake from './Cake';\nimport { CircleLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { fetchSearchCakes } from '../reduxstore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  cakes,\n  error,\n  loading,\n  fetchSearchCakes\n}) => {\n  _s();\n\n  const location = useLocation();\n  const loaderStyle = {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    zIndex: \"999\"\n  };\n  let query = queryString.parse(location.search);\n  useEffect(() => {\n    fetchSearchCakes(query.q);\n  }, [query.q]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"20px\",\n      marginLeft: \"20px\"\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: loaderStyle,\n      children: /*#__PURE__*/_jsxDEV(CircleLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"grid\",\n          gridTemplateColumns: \"33% 33% 33%\",\n          gridGap: \"50px\"\n        },\n        children: cakes.map((each, index) => {\n          return /*#__PURE__*/_jsxDEV(Cake, {\n            cake: each\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), cakes.length == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sorry no results found for search \", query.q]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 68\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Search, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n\n_c = Search;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.cake.loading,\n    cakes: state.cake.cakes,\n    error: state.cake.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchSearchCakes: searchTerm => dispatch(fetchSearchCakes(searchTerm))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/neosoft/react-project/react-first/src/components/Search.js"],"names":["queryString","useEffect","useLocation","Cake","CircleLoader","connect","fetchSearchCakes","Search","cakes","error","loading","location","loaderStyle","position","left","top","zIndex","query","parse","search","q","marginTop","marginLeft","display","gridTemplateColumns","gridGap","map","each","index","length","mapStateToProps","state","cake","mapDispatchToProps","dispatch","searchTerm"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,eAAjC;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAOC,EAAAA,KAAP;AAAaC,EAAAA,OAAb;AAAsBJ,EAAAA;AAAtB,CAAD,KAA6C;AAAA;;AACxD,QAAMK,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,WAAW,GAAG;AAChBC,IAAAA,QAAQ,EAAC,UADO;AAEhBC,IAAAA,IAAI,EAAC,KAFW;AAGhBC,IAAAA,GAAG,EAAC,KAHY;AAIhBC,IAAAA,MAAM,EAAC;AAJS,GAApB;AAMA,MAAIC,KAAK,GAAGjB,WAAW,CAACkB,KAAZ,CAAkBP,QAAQ,CAACQ,MAA3B,CAAZ;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,gBAAgB,CAACW,KAAK,CAACG,CAAP,CAAhB;AACH,GAFQ,EAEP,CAACH,KAAK,CAACG,CAAP,CAFO,CAAT;AAGA,sBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,SAAS,EAAC,MAAX;AAAmBC,MAAAA,UAAU,EAAC;AAA9B,KAAZ;AAAA,cACAZ,OAAO,gBAAG;AAAK,MAAA,KAAK,EAAEE,WAAZ;AAAA,6BAAyB,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoD;AAAA,8BACvD;AAAK,QAAA,KAAK,EAAE;AAACW,UAAAA,OAAO,EAAC,MAAT;AAAiBC,UAAAA,mBAAmB,EAAC,aAArC;AAAmDC,UAAAA,OAAO,EAAC;AAA3D,SAAZ;AAAA,kBACKjB,KAAK,CAACkB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB,8BAAO,QAAC,IAAD;AAAkB,YAAA,IAAI,EAAED;AAAxB,aAAWC,KAAX;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFA;AADL;AAAA;AAAA;AAAA;AAAA,cADuD,EAMtDpB,KAAK,CAACqB,MAAN,IAAgB,CAAhB,iBAAqB;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BAClB;AAAA,2DAAuCZ,KAAK,CAACG,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AADkB;AAAA;AAAA;AAAA;AAAA,cANiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAD3D;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA3BD;;GAAMb,M;UACeL,W;;;KADfK,M;;AA4BN,MAAMuB,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHrB,IAAAA,OAAO,EAACqB,KAAK,CAACC,IAAN,CAAWtB,OADhB;AAEHF,IAAAA,KAAK,EAACuB,KAAK,CAACC,IAAN,CAAWxB,KAFd;AAGHC,IAAAA,KAAK,EAACsB,KAAK,CAACC,IAAN,CAAWvB;AAHd,GAAP;AAKH,CAND;;AAQA,MAAMwB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACH5B,IAAAA,gBAAgB,EAAE6B,UAAD,IAAgBD,QAAQ,CAAC5B,gBAAgB,CAAC6B,UAAD,CAAjB;AADtC,GAAP;AAGH,CAJD;;AAKA,eAAe9B,OAAO,CAACyB,eAAD,EAAiBG,kBAAjB,CAAP,CAA4C1B,MAA5C,CAAf","sourcesContent":["import queryString from 'query-string';\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Cake from './Cake';\nimport { CircleLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { fetchSearchCakes } from '../reduxstore';\n\nconst Search = ({cakes,error,loading, fetchSearchCakes}) => {\n    const location = useLocation();\n    const loaderStyle = {\n        position:\"absolute\",\n        left:\"50%\",\n        top:\"50%\",\n        zIndex:\"999\",\n    }\n    let query = queryString.parse(location.search)\n    useEffect(() => {\n        fetchSearchCakes(query.q);\n    },[query.q]);\n    return (\n        <div style={{marginTop:\"20px\", marginLeft:\"20px\"}}> \n       {loading ? <div class={loaderStyle}><CircleLoader/></div> : <div>\n            <div style={{display:\"grid\", gridTemplateColumns:\"33% 33% 33%\",gridGap:\"50px\"}}>\n                {cakes.map((each, index) => {\n                    return <Cake key={index} cake={each}/>\n                })}\n            </div>\n            {cakes.length == 0 && <div className=\"alert\">\n                <h1>Sorry no results found for search {query.q}</h1>\n            </div>}\n       </div>}\n       </div>\n\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        loading:state.cake.loading,\n        cakes:state.cake.cakes,\n        error:state.cake.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchSearchCakes:(searchTerm) => dispatch(fetchSearchCakes(searchTerm))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);"]},"metadata":{},"sourceType":"module"}